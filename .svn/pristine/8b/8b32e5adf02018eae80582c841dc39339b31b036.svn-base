package org.hqu.production_ms.service.impl;

import java.util.List;

import org.hqu.production_ms.domain.Weigui;
import org.hqu.production_ms.domain.WeiguiExample;
import org.hqu.production_ms.domain.custom.CustomResult;
import org.hqu.production_ms.domain.custom.EUDataGridResult;
import org.hqu.production_ms.domain.po.WeiguiPO;
import org.hqu.production_ms.mapper.WeiguiMapper;
import org.hqu.production_ms.service.WeiguiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
@Service
public class WeiguiServiceImpl implements WeiguiService {
	@Autowired
	WeiguiMapper weiguiMapper;
	@Override
	public List<Weigui> find() throws Exception {
		WeiguiExample example = new WeiguiExample();
		return weiguiMapper.selectByExample(example);
	}

	@Override
	public EUDataGridResult getList(int page, int rows, Weigui weigui) throws Exception {
		//分页处理
				PageHelper.startPage(page, rows);
				List<Weigui> list = weiguiMapper.find();
				//创建一个返回值对象
				EUDataGridResult result = new EUDataGridResult();
				result.setRows(list);
				//取记录总条数
				PageInfo<Weigui> pageInfo = new PageInfo<>(list);
				result.setTotal(pageInfo.getTotal());
				return result;
	}

	@Override
	public Weigui get(int weiguiId) throws Exception {
		return weiguiMapper.selectSingleWeigui(weiguiId);
	}

	@Override
	public CustomResult delete(int string) throws Exception {
		int i = weiguiMapper.deleteByPrimaryKey(string);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "删除信息失败");
		}
	}

	@Override
	public CustomResult deleteBatch(int[] ids) throws Exception {
		int i = weiguiMapper.deleteBatch(ids);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "删除信息失败");
		}
	}

	@Override
	public CustomResult insert(WeiguiPO weigui) throws Exception {
		int i = weiguiMapper.insert(weigui);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "新增行驶里程记录记录信息失败");
		}
	}

	@Override
	public CustomResult updateAll(WeiguiPO weigui) throws Exception {
		int i = weiguiMapper.updateByPrimaryKey(weigui);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "修改行驶里程记录记录信息失败");
		}
	}

	@Override
	public CustomResult update(WeiguiPO Weigui) throws Exception {
		int i = weiguiMapper.updateByPrimaryKeySelective(Weigui);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "修改行驶里程记录记录信息失败");
		}
	}


	@Override
	public EUDataGridResult searchWeiguiBydrivernum(Integer page, Integer rows, String drivernum) throws Exception {
			//分页处理
			PageHelper.startPage(page, rows);
			List<Weigui> list = weiguiMapper.searchWeiguiBydrivernum(drivernum);
			//创建一个返回值对象
			EUDataGridResult result = new EUDataGridResult();
			result.setRows(list);
			//取记录总条数
			PageInfo<Weigui> pageInfo = new PageInfo<>(list);
			result.setTotal(pageInfo.getTotal());
			return result;
	}

	@Override
	public EUDataGridResult searchWeiguiBycarnum(Integer page, Integer rows, String carnum) throws Exception {
		//分页处理
		PageHelper.startPage(page, rows);
		List<Weigui> list = weiguiMapper.searchWeiguiBycarnum(carnum);
		//创建一个返回值对象
		EUDataGridResult result = new EUDataGridResult();
		result.setRows(list);
		//取记录总条数
		PageInfo<Weigui> pageInfo = new PageInfo<>(list);
		result.setTotal(pageInfo.getTotal());
		return result;
	}


}
