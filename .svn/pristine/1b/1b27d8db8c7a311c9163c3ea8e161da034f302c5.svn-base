package org.hqu.production_ms.service.impl;

import java.util.List;

import org.hqu.production_ms.domain.DriverRecord;
import org.hqu.production_ms.domain.DriverRecord;
import org.hqu.production_ms.domain.DriverRecordExample;
import org.hqu.production_ms.domain.custom.CustomResult;
import org.hqu.production_ms.domain.custom.EUDataGridResult;
import org.hqu.production_ms.domain.po.DriverRecordPO;
import org.hqu.production_ms.domain.po.DriverRecordPO;
import org.hqu.production_ms.mapper.DriverRecordMapper;
import org.hqu.production_ms.service.DriverRecordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
@Service
public class DriverRecordServiceImpl implements DriverRecordService {
	@Autowired
	DriverRecordMapper driverRecordMapper;
	@Override
	public List<DriverRecord> find() throws Exception {
		DriverRecordExample example = new DriverRecordExample();
		return driverRecordMapper.selectByExample(example);
	}

	@Override
	public EUDataGridResult getList(int page, int rows, DriverRecord driverRecord) throws Exception {
		//分页处理
				PageHelper.startPage(page, rows);
				List<DriverRecord> list = driverRecordMapper.find();
				//创建一个返回值对象
				EUDataGridResult result = new EUDataGridResult();
				result.setRows(list);
				//取记录总条数
				PageInfo<DriverRecord> pageInfo = new PageInfo<>(list);
				result.setTotal(pageInfo.getTotal());
				return result;
	}

	@Override
	public DriverRecord get(int driverRecordId) throws Exception {
		return driverRecordMapper.selectSingleDriverRecord(driverRecordId);
	}

	@Override
	public CustomResult delete(int string) throws Exception {
		int i = driverRecordMapper.deleteByPrimaryKey(string);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "删除信息失败");
		}
	}

	@Override
	public CustomResult deleteBatch(int[] ids) throws Exception {
		int i = driverRecordMapper.deleteBatch(ids);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "删除信息失败");
		}
	}

	@Override
	public CustomResult insert(DriverRecordPO driverRecord) throws Exception {
		int i = driverRecordMapper.insert(driverRecord);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "新增行驶里程记录记录信息失败");
		}
	}

	@Override
	public CustomResult updateAll(DriverRecordPO driverRecord) throws Exception {
		int i = driverRecordMapper.updateByPrimaryKey(driverRecord);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "修改行驶里程记录记录信息失败");
		}
	}

	@Override
	public CustomResult update(DriverRecordPO DriverRecord) throws Exception {
		int i = driverRecordMapper.updateByPrimaryKeySelective(DriverRecord);
		if(i>0){
			return CustomResult.ok();
		}else{
			return CustomResult.build(101, "修改行驶里程记录记录信息失败");
		}
	}


	@Override
	public EUDataGridResult searchDriverRecordBydrivernum(Integer page, Integer rows, String drivernum) throws Exception {
			//分页处理
			PageHelper.startPage(page, rows);
			List<DriverRecord> list = driverRecordMapper.searchDriverRecordBydrivernum(drivernum);
			//创建一个返回值对象
			EUDataGridResult result = new EUDataGridResult();
			result.setRows(list);
			//取记录总条数
			PageInfo<DriverRecord> pageInfo = new PageInfo<>(list);
			result.setTotal(pageInfo.getTotal());
			return result;
	}

	@Override
	public EUDataGridResult searchDriverRecordBydrivername(Integer page, Integer rows, String drivername) throws Exception {
		//分页处理
		PageHelper.startPage(page, rows);
		List<DriverRecord> list = driverRecordMapper.searchDriverRecordBydrivername(drivername);
		//创建一个返回值对象
		EUDataGridResult result = new EUDataGridResult();
		result.setRows(list);
		//取记录总条数
		PageInfo<DriverRecord> pageInfo = new PageInfo<>(list);
		result.setTotal(pageInfo.getTotal());
		return result;
	}


}
